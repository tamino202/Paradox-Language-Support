import{_ as p,a as t}from"./parameters_1-E5MDCLKe.js";import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as s,b as n,d as i,w as l,e,r as o,o as d}from"./app-C7ba-00X.js";const h={},u=e(`<h1 id="config-groups-config-files" tabindex="-1"><a class="header-anchor" href="#config-groups-config-files"><span>Config Groups &amp; Config Files</span></a></h1><h2 id="config-group" tabindex="-1"><a class="header-anchor" href="#config-group"><span>Config Group</span></a></h2><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h3><p>PLS implements various advanced language features based on config groups, which consists of many CWT config files.</p><p>Config groups can have different sources. For config groups from the same source, there are config groups for different game types, and the core config group, which is shared by all game types.</p><p>Reference Links:</p><ul><li><a href="https://github.com/DragonKnightOfBreeze/Paradox-Language-Support/tree/master/cwt" target="_blank" rel="noopener noreferrer">Repositories</a></li></ul><h3 id="sources" tabindex="-1"><a class="header-anchor" href="#sources"><span>Sources</span></a></h3><h4 id="builtin-config-groups" tabindex="-1"><a class="header-anchor" href="#builtin-config-groups"><span>Built-in Config Groups</span></a></h4><ul><li>Path: <code>config/{gameType}</code><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> (in the plugin jar)</li><li>Enabled: Always</li><li>Customizable ：No</li></ul><p>These config files are from plugin repository and config repositories of each game. Compare to the config files used by CWTools, there are several modifications and extensions.</p><h4 id="local-config-groups" tabindex="-1"><a class="header-anchor" href="#local-config-groups"><span>Local Config Groups</span></a></h4><ul><li>Path: <code>{rootPath}/{gameType}</code><sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup> (<code>rootPath</code> need be to be configured in plugin&#39;s settings page)</li><li>Enabled: Yes if path is existing</li><li>Customizable ：Yes</li></ul><p>Containing config files are customized by users themselves. Available for all projects. Changes should be confirmed to import manually.</p><h4 id="project-config-groups" tabindex="-1"><a class="header-anchor" href="#project-config-groups"><span>Project Config Groups</span></a></h4><ul><li>Path: <code>.config/{gameType}</code><sup class="footnote-ref"><a href="#footnote1">[1:2]</a><a class="footnote-anchor" id="footnote-ref1:2"></a></sup> (in the project root directory)</li><li>Enabled: Yes if path is existing</li><li>Customizable ：Yes</li></ul><p>Containing config files are customized by users themselves. Only available for this project. Changes should be confirmed to import manually.</p><h3 id="overridden-strategy" tabindex="-1"><a class="header-anchor" href="#overridden-strategy"><span>Overridden Strategy</span></a></h3><p>Configs use the LIOS overridden strategy based on the file path and the config ID.</p><p>When reading configs, the plugin will iterate config groups by following order: built-in config groups, local config groups, and project config groups. The core config group is shared by all game types, and will be iterated before the config group for related game type.</p><p>For example, if you have written some custom configs in the config file <code>.config/stellaris/modifiers.cwt</code> (which is in the project root directory), it will completely override the built-in modifier configs. Since the built-in modifier configs are located in the config file <code>config/stellaris/modifiers.cwt</code> (which is in the plugin jar), and both of their file path is <code>modifiers.cwt</code>. If these are no content in the custom config file, after applied, the plugin will be unable to resolve any modifier in script files.</p><h2 id="cwt-config-file" tabindex="-1"><a class="header-anchor" href="#cwt-config-file"><span>CWT Config File</span></a></h2><h3 id="summary-1" tabindex="-1"><a class="header-anchor" href="#summary-1"><span>Summary</span></a></h3><p>CWT config file use its own file format, which can be considered as a variant of paradox script language. Its file extension is <code>.cwt</code>.</p><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h3><p>The basic syntax of a CWT config file is as follows:</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># both equal sign (&#39;=&#39;, &#39;==&#39;) and not equal sign (&#39;&lt;&gt;&#39;, &#39;!=&#39;) can be used as the k-v separator (also available in options)</span></span>
<span class="line"><span># properties (options) and values can be mixed in clauses (also available in options)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### documentation comment</span></span>
<span class="line"><span>## option = option_value</span></span>
<span class="line"><span>## option_0 = { k = v }</span></span>
<span class="line"><span>## option_value</span></span>
<span class="line"><span>prop = {</span></span>
<span class="line"><span>    # line comment</span></span>
<span class="line"><span>    k = v</span></span>
<span class="line"><span>    v</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="writing-cwt-config-files" tabindex="-1"><a class="header-anchor" href="#writing-cwt-config-files"><span>Writing CWT Config Files</span></a></h2><h3 id="summary-2" tabindex="-1"><a class="header-anchor" href="#summary-2"><span>Summary</span></a></h3><p>In progress.</p><p>For more detailed specifications, please refer to the reference links below and the built-in config files.</p><p>Reference Links:</p><ul><li><a href="https://github.com/DragonKnightOfBreeze/Paradox-Language-Support/blob/master/references/cwt/guidance.md" target="_blank" rel="noopener noreferrer">Guidance</a></li></ul><h3 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications"><span>Specifications</span></a></h3>`,34),m={id:"priorities-new-in-1-3-7",tabindex:"-1"},v={class:"header-anchor",href:"#priorities-new-in-1-3-7"},g=e(`<p>Priority configs are used to configure the override order for targets (scripted variables, definitions, localisations and complex enums).</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>priorities = {</span></span>
<span class="line"><span>    # LHS - file path (relative to game or mod root directory)</span></span>
<span class="line"><span>    # RHS - priority (available values: &quot;fios&quot;, &quot;lios&quot;, &quot;ordered&quot;, default value: &quot;lios&quot;, ignore case)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # file path - path of specific directory (e.g. &quot;&quot;common/on_actions&quot;, &quot;common/scripted_variables&quot;, &quot;localisation&quot;)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # fios - use the one that reads first, ignore all remaining items</span></span>
<span class="line"><span>    # lios - use the one that reads last (if not specified, use this as default)</span></span>
<span class="line"><span>    # ordered - reads by order, no overrides</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    &quot;events&quot; = fios</span></span>
<span class="line"><span>    # ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="system-scopes" tabindex="-1"><a class="header-anchor" href="#system-scopes"><span>System Scopes</span></a></h4><p>TODO</p><h4 id="localisation-locales" tabindex="-1"><a class="header-anchor" href="#localisation-locales"><span>Localisation Locales</span></a></h4><p>TODO</p><h4 id="types-and-subtypes" tabindex="-1"><a class="header-anchor" href="#types-and-subtypes"><span>Types and Subtypes</span></a></h4><p>TODO</p><h4 id="declarations" tabindex="-1"><a class="header-anchor" href="#declarations"><span>Declarations</span></a></h4><p>TODO</p><h4 id="enums-and-complex-enums" tabindex="-1"><a class="header-anchor" href="#enums-and-complex-enums"><span>Enums and Complex Enums</span></a></h4><p>TODO</p><h4 id="dynamic-values" tabindex="-1"><a class="header-anchor" href="#dynamic-values"><span>Dynamic Values</span></a></h4><p>TODO</p><h4 id="aliases-and-single-aliases" tabindex="-1"><a class="header-anchor" href="#aliases-and-single-aliases"><span>Aliases and Single Aliases</span></a></h4><p>TODO</p><h4 id="inlines" tabindex="-1"><a class="header-anchor" href="#inlines"><span>Inlines</span></a></h4><p>TODO</p><h4 id="modifiers-and-modifier-groups" tabindex="-1"><a class="header-anchor" href="#modifiers-and-modifier-groups"><span>Modifiers and Modifier Groups</span></a></h4><p>TODO</p><h4 id="links" tabindex="-1"><a class="header-anchor" href="#links"><span>Links</span></a></h4><p>TODO</p><h4 id="scopes-and-scope-groups" tabindex="-1"><a class="header-anchor" href="#scopes-and-scope-groups"><span>Scopes and Scope Groups</span></a></h4><p>TODO</p><h4 id="localisation-links-and-localisation-commands" tabindex="-1"><a class="header-anchor" href="#localisation-links-and-localisation-commands"><span>Localisation Links and Localisation Commands</span></a></h4><p>TODO</p><h3 id="specifications-extended-cwt-configs" tabindex="-1"><a class="header-anchor" href="#specifications-extended-cwt-configs"><span>Specifications (Extended CWT Configs)</span></a></h3><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>These configs are mostly provided by users themselves, they can be used to enhance plugin&#39;s various language features, such as quick documentation, inlay hints, code highlighting and code completion.</p></div>`,28),f={id:"scripted-variables-new-in-1-3-5",tabindex:"-1"},b={class:"header-anchor",href:"#scripted-variables-new-in-1-3-5"},x=e(`<div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>scripted_variables = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="definitions" tabindex="-1"><a class="header-anchor" href="#definitions"><span>Definitions</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>definitions = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## type = civic_or_origin.civic</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span>    ## type = scripted_trigger</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="game-rules" tabindex="-1"><a class="header-anchor" href="#game-rules"><span>Game Rules</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>game_rules = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    # use &#39;x = xxx&#39; to override declaration config</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="on-actions" tabindex="-1"><a class="header-anchor" href="#on-actions"><span>On Actions</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>on_actions = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    ## event_type = country</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="inline-scripts" tabindex="-1"><a class="header-anchor" href="#inline-scripts"><span>Inline Scripts</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>inline_scripts = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; is a inline script expression, e.g., for &#39;inline_script = jobs/researchers_add&#39;, &#39;x&#39; should be &#39;jobs/researchers_add&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    # use &#39;x = xxx&#39; to declare context config(s) (add &#39;## context_configs_type = multiple&#39; if there are various context configs)</span></span>
<span class="line"><span>    # note extended documentation is unavailable for inline scripts</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # more detailed examples for declaring context config(s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = {</span></span>
<span class="line"><span>        ## cardinality = 0..1</span></span>
<span class="line"><span>        potential = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>        ## cardinality = 0..1</span></span>
<span class="line"><span>        possible = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.6, using single alias at root level is also available here</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example:</p><p><img src="`+p+`" alt=""></p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>parameters = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; is a parameter name, e.g., for &#39;$JOB$&#39;, &#39;x&#39; should be &#39;JOB&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    # use &#39;x = xxx&#39; to declare context config(s) (add &#39;## context_configs_type = multiple&#39; if there are various context configs)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.6, value of option &#39;context_key&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # more detailed examples for declaring context config(s)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    x = localistion</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = {</span></span>
<span class="line"><span>        localisation</span></span>
<span class="line"><span>        scalar</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.6, using single alias at root level is also available here</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.12, a parameter&#39;s config context and scope context can be specified to inherit from its context</span></span>
<span class="line"><span>    # e.g. for parameter &#39;x&#39; with context key &#39;scripted_trigger@some_trigger&#39;, its context is scripted trigger &#39;some_trigger&#39;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## inherit</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example:</p><p><img src="`+t+`" alt=""></p><h4 id="complex-enum-values" tabindex="-1"><a class="header-anchor" href="#complex-enum-values"><span>Complex Enum Values</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>complex_enum_values = {</span></span>
<span class="line"><span>    component_tag = {</span></span>
<span class="line"><span>        # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>        # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        ### Some documentation</span></span>
<span class="line"><span>        ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span>        x</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dynamic-values-1" tabindex="-1"><a class="header-anchor" href="#dynamic-values-1"><span>Dynamic Values</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dynamic_values = {</span></span>
<span class="line"><span>    event_target = {</span></span>
<span class="line"><span>        # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>        # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ### Some documentation</span></span>
<span class="line"><span>        ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span>        x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # since 1.3.9, scope context related options are also available here</span></span>
<span class="line"><span>        # only receive push scope (this scope), ignore others (like root scope, etc.)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ## push_scope = country</span></span>
<span class="line"><span>        x</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h3><h4 id="about-the-template-expression" tabindex="-1"><a class="header-anchor" href="#about-the-template-expression"><span>About the Template Expression</span></a></h4><p>Template expressions are composed of string literals and expressions of limited types (definitions, enums and dynamic values), and can be used for more flexible matching.</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># a string literal, exactly matches &#39;x&#39;</span></span>
<span class="line"><span>x</span></span>
<span class="line"><span># a template expression which contains a reference to jobs, matches &#39;a_researcher_b&#39;, &#39;a_farmer_b&#39;, etc.</span></span>
<span class="line"><span>a_&lt;job&gt;_b</span></span>
<span class="line"><span># a template expression which contains a references to enum of weight_or_base, matches &#39;a_weight_b&#39; and &#39;a_base_b&#39;</span></span>
<span class="line"><span>a_enum[weight_or_base]_b</span></span>
<span class="line"><span># a template expression which contains a references to dynamic value type of anything</span></span>
<span class="line"><span># generally, there is no limit for &#39;value[anything]&#39;, so this expression is equivalent to regex &#39;a_.*_b&#39;</span></span>
<span class="line"><span>a_value[anything]_b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),y={id:"how-to-use-the-ant-expression-in-config-files-new-in-1-3-6",tabindex:"-1"},k={class:"header-anchor",href:"#how-to-use-the-ant-expression-in-config-files-new-in-1-3-6"},_=e(`<p>Since 1.3.6, the ANT expression can be used for more flexible matching.</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># a ant expression use prefix &#39;ant:&#39;</span></span>
<span class="line"><span>ant:/foo/bar?/*</span></span>
<span class="line"><span># a ant expression use prefix &#39;ant.i:&#39; (ignore case)</span></span>
<span class="line"><span>ant.i:/foo/bar?/*</span></span>
<span class="line"><span></span></span>
<span class="line"><span># wildcards in ant expression:</span></span>
<span class="line"><span># &#39;?&#39; - used to match any single character</span></span>
<span class="line"><span># &#39;*&#39; - used to match any characters (exclude &#39;/&#39;)</span></span>
<span class="line"><span># &#39;**&#39; - used to match any characters</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),w={id:"how-to-us-regex-in-config-files-new-in-1-3-6",tabindex:"-1"},C={class:"header-anchor",href:"#how-to-us-regex-in-config-files-new-in-1-3-6"},S=e(`<p>Since 1.3.6, Regex can be used for more flexible matching.</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># a regex use prefix &#39;re:&#39;</span></span>
<span class="line"><span>re:foo.*</span></span>
<span class="line"><span># a regex use prefix &#39;re.i:&#39; (ignore case)</span></span>
<span class="line"><span>re.i:foo.*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="how-to-specify-the-scope-context-in-config-files" tabindex="-1"><a class="header-anchor" href="#how-to-specify-the-scope-context-in-config-files"><span>How to Specify the Scope Context in Config Files</span></a></h4><p>In config files, the scope context is specified by option <code>push_scope</code> and <code>replace_scope</code>.</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># push &#39;country&#39; scope to scope stack</span></span>
<span class="line"><span># for this example, the next this scope will be &#39;country&#39;</span></span>
<span class="line"><span>## push_scope = country</span></span>
<span class="line"><span>some_config</span></span>
<span class="line"><span></span></span>
<span class="line"><span># replace scopes of specific system scopes into scope context</span></span>
<span class="line"><span># not supported for &#39;prev&#39; system scope (and &#39;prevprev&#39;, etc.)</span></span>
<span class="line"><span># for this example, the next this scope will be &#39;country&#39;, so do the next root scope and the next from scope</span></span>
<span class="line"><span>## replace_scopes = { this = country root = country from = country }</span></span>
<span class="line"><span>some_config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="importing-cwt-config-files" tabindex="-1"><a class="header-anchor" href="#importing-cwt-config-files"><span>Importing CWT Config Files</span></a></h2><h3 id="summary-3" tabindex="-1"><a class="header-anchor" href="#summary-3"><span>Summary</span></a></h3><p>You can write customized config files in directories of <a href="#local-config-groups">local config groups</a> or <a href="#project-config-groups">project config groups</a>. They are helpful for optimizing plugin&#39;s built-in configs, or enhancing plugin&#39;s features.</p><p>If some changes are happened, the refresh button will be appeared in the context float toolbar in the upper right corner of the editor. Click it to confirm to import, so changes of these custom config files will be applied.</p><p>IDE will take some time to reparse opened files in background, And please note that if the changes in the config files will result in the change of the indexing logic (for example, a new definition type is added, or a match condition for some definition type is changed), you may need to reindex the whole project (this may take several minutes), to make sure the plugin works properly, if in the situation that involves these changes.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Allowed values for <code>gameType</code>: <code>stellaris</code>, <code>ck2</code>, <code>ck3</code>, <code>eu4</code>, <code>hoi4</code>, <code>ir</code>, <code>vic2</code>, <code>vic3</code> (or <code>core</code> for core config group) <a href="#footnote-ref1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:2" class="footnote-backref">↩︎</a></p></li></ol></section>`,12);function T(O,q){const a=o("Badge");return d(),c("div",null,[u,s("h4",m,[s("a",v,[s("span",null,[n("Priorities "),i(a,{type:"tip"},{default:l(()=>[n("New in 1.3.7")]),_:1})])])]),g,s("h4",f,[s("a",b,[s("span",null,[n("Scripted Variables "),i(a,{type:"tip"},{default:l(()=>[n("New in 1.3.5")]),_:1})])])]),x,s("h4",y,[s("a",k,[s("span",null,[n("How to Use the ANT Expression in Config Files "),i(a,{type:"tip"},{default:l(()=>[n("New in 1.3.6")]),_:1})])])]),_,s("h4",w,[s("a",C,[s("span",null,[n("How to Us Regex in Config Files "),i(a,{type:"tip"},{default:l(()=>[n("New in 1.3.6")]),_:1})])])]),S])}const P=r(h,[["render",T],["__file","config.html.vue"]]),j=JSON.parse('{"path":"/en/config.html","title":"Config Groups & Config Files","lang":"en-US","frontmatter":{"description":"Config Groups & Config Files Config Group Summary PLS implements various advanced language features based on config groups, which consists of many CWT config files. Config group...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://windea.icu/Paradox-Language-Support/zh/config.html"}],["meta",{"property":"og:url","content":"https://windea.icu/Paradox-Language-Support/en/config.html"}],["meta",{"property":"og:site_name","content":"Paradox Language Support"}],["meta",{"property":"og:title","content":"Config Groups & Config Files"}],["meta",{"property":"og:description","content":"Config Groups & Config Files Config Group Summary PLS implements various advanced language features based on config groups, which consists of many CWT config files. Config group..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-05T20:33:40.000Z"}],["meta",{"property":"article:author","content":"DragonKnightOfBreeze"}],["meta",{"property":"article:modified_time","content":"2024-12-05T20:33:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Config Groups & Config Files\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-05T20:33:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DragonKnightOfBreeze\\",\\"url\\":\\"https://github.com/DragonKnightOfBreeze\\",\\"email\\":\\"dk_breeze@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Config Group","slug":"config-group","link":"#config-group","children":[{"level":3,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":3,"title":"Sources","slug":"sources","link":"#sources","children":[]},{"level":3,"title":"Overridden Strategy","slug":"overridden-strategy","link":"#overridden-strategy","children":[]}]},{"level":2,"title":"CWT Config File","slug":"cwt-config-file","link":"#cwt-config-file","children":[{"level":3,"title":"Summary","slug":"summary-1","link":"#summary-1","children":[]},{"level":3,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]}]},{"level":2,"title":"Writing CWT Config Files","slug":"writing-cwt-config-files","link":"#writing-cwt-config-files","children":[{"level":3,"title":"Summary","slug":"summary-2","link":"#summary-2","children":[]},{"level":3,"title":"Specifications","slug":"specifications","link":"#specifications","children":[]},{"level":3,"title":"Specifications (Extended CWT Configs)","slug":"specifications-extended-cwt-configs","link":"#specifications-extended-cwt-configs","children":[]},{"level":3,"title":"FAQ","slug":"faq","link":"#faq","children":[]}]},{"level":2,"title":"Importing CWT Config Files","slug":"importing-cwt-config-files","link":"#importing-cwt-config-files","children":[{"level":3,"title":"Summary","slug":"summary-3","link":"#summary-3","children":[]}]}],"git":{"createdTime":1733430820000,"updatedTime":1733430820000,"contributors":[{"name":"tamino202","email":"tamino202@gmail.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1640},"filePathRelative":"en/config.md","localizedDate":"December 5, 2024","autoDesc":true}');export{P as comp,j as data};
