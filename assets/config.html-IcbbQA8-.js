import{_ as p,a as c}from"./parameters_1-E5MDCLKe.js";import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as s,b as n,d as i,w as l,e as a,r as d,o}from"./app-C7ba-00X.js";const h={},v=a(`<h1 id="规则分组与规则文件" tabindex="-1"><a class="header-anchor" href="#规则分组与规则文件"><span>规则分组与规则文件</span></a></h1><h2 id="config-group" tabindex="-1"><a class="header-anchor" href="#config-group"><span>规则分组</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>PLS基于由CWT规则文件组成的规则分组，实现了诸多语言功能。</p><p>规则分组可以有不同的来源，而对于同一来源的规则分组，又区分为各自游戏类型的规则分组，以及所有游戏类型共享的核心规则分组。</p><p>参考链接：</p><ul><li><a href="https://github.com/DragonKnightOfBreeze/Paradox-Language-Support/tree/master/cwt" target="_blank" rel="noopener noreferrer">仓库一览</a></li></ul><h3 id="来源" tabindex="-1"><a class="header-anchor" href="#来源"><span>来源</span></a></h3><h4 id="builtin-config-groups" tabindex="-1"><a class="header-anchor" href="#builtin-config-groups"><span>内置的规则分组</span></a></h4><ul><li>路径：<code>config/{gameType}</code><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>（位于插件jar包中）</li><li>是否启用：始终启用</li><li>是否可自定义：否</li></ul><p>其中的规则文件来自插件仓库以及各自游戏的规则仓库，相较于CWTools所使用的规则文件，它们经过一定的修改和扩展。</p><h4 id="local-config-groups" tabindex="-1"><a class="header-anchor" href="#local-config-groups"><span>本地的规则分组</span></a></h4><ul><li>路径：<code>{rootPath}/{gameType}</code><sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup>（可在插件的配置页面中配置<code>rootPath</code>对应的文件路径）</li><li>是否启用：如果路径存在</li><li>是否可自定义：是</li></ul><p>其中的规则文件由用户自定义，适用于所有项目。对它们的更改需要手动确认导入。</p><h4 id="project-config-groups" tabindex="-1"><a class="header-anchor" href="#project-config-groups"><span>项目的规则分组</span></a></h4><ul><li>路径：<code>.config/{gameType}</code><sup class="footnote-ref"><a href="#footnote1">[1:2]</a><a class="footnote-anchor" id="footnote-ref1:2"></a></sup>（位于项目根目录中）</li><li>是否启用：如果路径存在</li><li>是否可自定义：是</li></ul><p>其中的规则文件由用户自定义，仅适用于当前项目。对它们的更改需要手动确认导入。</p><h3 id="覆盖策略" tabindex="-1"><a class="header-anchor" href="#覆盖策略"><span>覆盖策略</span></a></h3><p>规则会按照文件路径和规则ID进行后序覆盖。</p><p>读取规则时，插件会依次遍历内置的规则分组、本地的规则分组以及项目的规则分组。 核心规则分组由所有游戏类型共享，会在对应游戏类型的规则分组之前被遍历。</p><p>例如，如果你在项目根目录下的规则文件<code>.config/stellaris/modifiers.cwt</code>中编写了自定义的规则，它将完全覆盖插件内置的修正规则。 因为插件内置的修正规则位于插件jar包中的规则文件<code>config/stellaris/modifiers.cwt</code>中，它们的文件路径都是<code>modifiers.cwt</code>。 如果此自定义的规则文件中没有任何内容，应用后插件将无法解析脚本文件中的任何修正。</p><h2 id="cwt-config-file" tabindex="-1"><a class="header-anchor" href="#cwt-config-file"><span>CWT规则文件</span></a></h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h3><p>CWT规则文件使用一种特别的文件格式，可以视为Paradox脚本语言的变种。它的文件扩展名为<code>.cwt</code>。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><p>CWT规则文件的基本语法如下所示：</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># both equal sign (&#39;=&#39;, &#39;==&#39;) and not equal sign (&#39;&lt;&gt;&#39;, &#39;!=&#39;) can be used as the k-v separator (also available in options)</span></span>
<span class="line"><span># properties (options) and values can be mixed in clauses (also available in options)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### documentation comment</span></span>
<span class="line"><span>## option = option_value</span></span>
<span class="line"><span>## option_0 = { k = v }</span></span>
<span class="line"><span>## option_value</span></span>
<span class="line"><span>prop = {</span></span>
<span class="line"><span>    # line comment</span></span>
<span class="line"><span>    k = v</span></span>
<span class="line"><span>    v</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="writing-cwt-config-files" tabindex="-1"><a class="header-anchor" href="#writing-cwt-config-files"><span>编写CWT规则文件</span></a></h2><h3 id="概述-2" tabindex="-1"><a class="header-anchor" href="#概述-2"><span>概述</span></a></h3><p>正在更新中。</p><p>关于更详细的编写规范，请参考下方的参考链接以及插件内置的那些规则文件。</p><p>参考链接：</p><ul><li><a href="https://github.com/DragonKnightOfBreeze/Paradox-Language-Support/blob/master/references/cwt/guidance.md" target="_blank" rel="noopener noreferrer">指引文档</a></li></ul><h3 id="编写规范" tabindex="-1"><a class="header-anchor" href="#编写规范"><span>编写规范</span></a></h3>`,34),u={id:"priorities-new-in-1-3-7",tabindex:"-1"},m={class:"header-anchor",href:"#priorities-new-in-1-3-7"},b=a(`<p>优先级规则可以用来配置目标（封装变量，定义、本地化与复杂枚举）的覆盖顺序。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>priorities = {</span></span>
<span class="line"><span>    # LHS - file path (relative to game or mod root directory)</span></span>
<span class="line"><span>    # RHS - priority (available values: &quot;fios&quot;, &quot;lios&quot;, &quot;ordered&quot;, default value: &quot;lios&quot;, ignore case)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # file path - path of specific directory (e.g. &quot;&quot;common/on_actions&quot;, &quot;common/scripted_variables&quot;, &quot;localisation&quot;)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # fios - use the one that reads first, ignore all remaining items</span></span>
<span class="line"><span>    # lios - use the one that reads last (if not specified, use this as default)</span></span>
<span class="line"><span>    # ordered - reads by order, no overrides</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    &quot;events&quot; = fios</span></span>
<span class="line"><span>    # ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="system-scopes" tabindex="-1"><a class="header-anchor" href="#system-scopes"><span>System Scopes</span></a></h4><p>TODO</p><h4 id="localisation-locales" tabindex="-1"><a class="header-anchor" href="#localisation-locales"><span>Localisation Locales</span></a></h4><p>TODO</p><h4 id="types-and-subtypes" tabindex="-1"><a class="header-anchor" href="#types-and-subtypes"><span>Types and Subtypes</span></a></h4><p>TODO</p><h4 id="declarations" tabindex="-1"><a class="header-anchor" href="#declarations"><span>Declarations</span></a></h4><p>TODO</p><h4 id="enums-and-complex-enums" tabindex="-1"><a class="header-anchor" href="#enums-and-complex-enums"><span>Enums and Complex Enums</span></a></h4><p>TODO</p><h4 id="dynamic-values" tabindex="-1"><a class="header-anchor" href="#dynamic-values"><span>Dynamic Values</span></a></h4><p>TODO</p><h4 id="aliases-and-single-aliases" tabindex="-1"><a class="header-anchor" href="#aliases-and-single-aliases"><span>Aliases and Single Aliases</span></a></h4><p>TODO</p><h4 id="inlines" tabindex="-1"><a class="header-anchor" href="#inlines"><span>Inlines</span></a></h4><p>TODO</p><h4 id="modifiers-and-modifier-groups" tabindex="-1"><a class="header-anchor" href="#modifiers-and-modifier-groups"><span>Modifiers and Modifier Groups</span></a></h4><p>TODO</p><h4 id="links" tabindex="-1"><a class="header-anchor" href="#links"><span>Links</span></a></h4><p>TODO</p><h4 id="scopes-and-scope-groups" tabindex="-1"><a class="header-anchor" href="#scopes-and-scope-groups"><span>Scopes and Scope Groups</span></a></h4><p>TODO</p><h4 id="localisation-links-and-localisation-commands" tabindex="-1"><a class="header-anchor" href="#localisation-links-and-localisation-commands"><span>Localisation Links and Localisation Commands</span></a></h4><p>TODO</p><h3 id="编写规范-扩展的cwt规则" tabindex="-1"><a class="header-anchor" href="#编写规范-扩展的cwt规则"><span>编写规范（扩展的CWT规则）</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这些规则基本上由用户自行编写，用于强化插件的各项语言功能，例如快速文档、内嵌提示、代码高亮与代码补全。</p></div>`,28),g={id:"scripted-variables-new-in-1-3-5",tabindex:"-1"},f={class:"header-anchor",href:"#scripted-variables-new-in-1-3-5"},x=a(`<div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>scripted_variables = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="definitions" tabindex="-1"><a class="header-anchor" href="#definitions"><span>Definitions</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>definitions = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## type = civic_or_origin.civic</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span>    ## type = scripted_trigger</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="game-rules" tabindex="-1"><a class="header-anchor" href="#game-rules"><span>Game Rules</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>game_rules = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    # use &#39;x = xxx&#39; to override declaration config</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="on-actions" tabindex="-1"><a class="header-anchor" href="#on-actions"><span>On Actions</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>on_actions = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    ## event_type = country</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="inline-scripts" tabindex="-1"><a class="header-anchor" href="#inline-scripts"><span>Inline Scripts</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>inline_scripts = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; is a inline script expression, e.g., for &#39;inline_script = jobs/researchers_add&#39;, &#39;x&#39; should be &#39;jobs/researchers_add&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    # use &#39;x = xxx&#39; to declare context config(s) (add &#39;## context_configs_type = multiple&#39; if there are various context configs)</span></span>
<span class="line"><span>    # note extended documentation is unavailable for inline scripts</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # more detailed examples for declaring context config(s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = {</span></span>
<span class="line"><span>        ## cardinality = 0..1</span></span>
<span class="line"><span>        potential = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>        ## cardinality = 0..1</span></span>
<span class="line"><span>        possible = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.6, using single alias at root level is also available here</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p><img src="`+p+`" alt=""></p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>parameters = {</span></span>
<span class="line"><span>    # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; is a parameter name, e.g., for &#39;$JOB$&#39;, &#39;x&#39; should be &#39;JOB&#39;</span></span>
<span class="line"><span>    # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    # use &#39;x = xxx&#39; to declare context config(s) (add &#39;## context_configs_type = multiple&#39; if there are various context configs)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.6, value of option &#39;context_key&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ### Some documentation</span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # more detailed examples for declaring context config(s)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    x = localistion</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = {</span></span>
<span class="line"><span>        localisation</span></span>
<span class="line"><span>        scalar</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.5, scope context related options are also available here</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## replace_scopes = { this = country root = country }</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.6, using single alias at root level is also available here</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## context_configs_type = multiple</span></span>
<span class="line"><span>    x = single_alias_right[trigger_clause]</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # since 1.3.12, a parameter&#39;s config context and scope context can be specified to inherit from its context</span></span>
<span class="line"><span>    # e.g. for parameter &#39;x&#39; with context key &#39;scripted_trigger@some_trigger&#39;, its context is scripted trigger &#39;some_trigger&#39;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ## context_key = scripted_trigger@some_trigger</span></span>
<span class="line"><span>    ## inherit</span></span>
<span class="line"><span>    x</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p><img src="`+c+`" alt=""></p><h4 id="complex-enum-values" tabindex="-1"><a class="header-anchor" href="#complex-enum-values"><span>Complex Enum Values</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>complex_enum_values = {</span></span>
<span class="line"><span>    component_tag = {</span></span>
<span class="line"><span>        # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>        # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        ### Some documentation</span></span>
<span class="line"><span>        ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span>        x</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dynamic-values-1" tabindex="-1"><a class="header-anchor" href="#dynamic-values-1"><span>Dynamic Values</span></a></h4><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dynamic_values = {</span></span>
<span class="line"><span>    event_target = {</span></span>
<span class="line"><span>        # &#39;x&#39; or &#39;x = xxx&#39;</span></span>
<span class="line"><span>        # &#39;x&#39; can also be a pattern expression (template expression, ant expression or regex)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ### Some documentation</span></span>
<span class="line"><span>        ## hint = §RSome inlay hint text§!</span></span>
<span class="line"><span>        x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # since 1.3.9, scope context related options are also available here</span></span>
<span class="line"><span>        # only receive push scope (this scope), ignore others (like root scope, etc.)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ## push_scope = country</span></span>
<span class="line"><span>        x</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h3><h4 id="关于模版表达式" tabindex="-1"><a class="header-anchor" href="#关于模版表达式"><span>关于模版表达式</span></a></h4><p>模版表达式由字符串字面量以及限定类型的表达式（定义，枚举，动态值）组合而成，用来进行更加灵活的匹配。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># a string literal, exactly matches &#39;x&#39;</span></span>
<span class="line"><span>x</span></span>
<span class="line"><span># a template expression which contains a reference to jobs, matches &#39;a_researcher_b&#39;, &#39;a_farmer_b&#39;, etc.</span></span>
<span class="line"><span>a_&lt;job&gt;_b</span></span>
<span class="line"><span># a template expression which contains a references to enum of weight_or_base, matches &#39;a_weight_b&#39; and &#39;a_base_b&#39;</span></span>
<span class="line"><span>a_enum[weight_or_base]_b</span></span>
<span class="line"><span># a template expression which contains a references to dynamic value type of anything</span></span>
<span class="line"><span># generally, there is no limit for &#39;value[anything]&#39;, so this expression is equivalent to regex &#39;a_.*_b&#39;</span></span>
<span class="line"><span>a_value[anything]_b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),k={id:"如何在规则文件中使用ant表达式-new-in-1-3-6",tabindex:"-1"},_={class:"header-anchor",href:"#如何在规则文件中使用ant表达式-new-in-1-3-6"},y=a(`<p>从1.3.6开始，可以通过ANT表达式进行更加灵活的匹配。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># a ant expression use prefix &#39;ant:&#39;</span></span>
<span class="line"><span>ant:/foo/bar?/*</span></span>
<span class="line"><span># a ant expression use prefix &#39;ant.i:&#39; (ignore case)</span></span>
<span class="line"><span>ant.i:/foo/bar?/*</span></span>
<span class="line"><span></span></span>
<span class="line"><span># wildcards in ant expression:</span></span>
<span class="line"><span># &#39;?&#39; - used to match any single character</span></span>
<span class="line"><span># &#39;*&#39; - used to match any characters (exclude &#39;/&#39;)</span></span>
<span class="line"><span># &#39;**&#39; - used to match any characters</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),w={id:"如何在规则文件中使用正则表达式-new-in-1-3-6",tabindex:"-1"},T={class:"header-anchor",href:"#如何在规则文件中使用正则表达式-new-in-1-3-6"},O=a(`<p>从1.3.6开始，可以通过正则表达式进行更加灵活的匹配。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># a regex use prefix &#39;re:&#39;</span></span>
<span class="line"><span>re:foo.*</span></span>
<span class="line"><span># a regex use prefix &#39;re.i:&#39; (ignore case)</span></span>
<span class="line"><span>re.i:foo.*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何在规则文件中指定作用域上下文" tabindex="-1"><a class="header-anchor" href="#如何在规则文件中指定作用域上下文"><span>如何在规则文件中指定作用域上下文</span></a></h4><p>在规则文件中，作用域上下文是通过选项<code>push_scope</code>与<code>replace_scope</code>来指定的。</p><div class="language-cwt line-numbers-mode" data-highlighter="shiki" data-ext="cwt" data-title="cwt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># push &#39;country&#39; scope to scope stack</span></span>
<span class="line"><span># for this example, the next this scope will be &#39;country&#39;</span></span>
<span class="line"><span>## push_scope = country</span></span>
<span class="line"><span>some_config</span></span>
<span class="line"><span></span></span>
<span class="line"><span># replace scopes of specific system scopes into scope context</span></span>
<span class="line"><span># not supported for &#39;prev&#39; system scope (and &#39;prevprev&#39;, etc.)</span></span>
<span class="line"><span># for this example, the next this scope will be &#39;country&#39;, so do the next root scope and the next from scope</span></span>
<span class="line"><span>## replace_scopes = { this = country root = country from = country }</span></span>
<span class="line"><span>some_config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="importing-cwt-config-files" tabindex="-1"><a class="header-anchor" href="#importing-cwt-config-files"><span>导入CWT规则文件</span></a></h2><h3 id="概述-3" tabindex="-1"><a class="header-anchor" href="#概述-3"><span>概述</span></a></h3><p>你可以在<a href="#local-config-groups">本地的规则分组</a>或者<a href="#project-config-groups">项目的规则分组</a>对应的目录下编写自定义的规则文件。 它们可以用来完善插件内置的规则，或是增强插件的功能。</p><p>如果发生更改，编辑器右上角的上下文悬浮工具栏中会出现刷新按钮。 点击确认导入后，即可应用这些自定义的规则文件的更改。</p><p>IDE将会在后台花费一些时间重新解析已打开的文件， 并且请注意，如果规则文件的更改会引发索引逻辑的更改 （例如，新增了一种定义类型，或是更改了某种定义类型的匹配条件）， 你可能需要重新索引整个项目（这可能需要花费数分钟），以使在涉及到这些更改的场合，插件能够正常工作。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>允许的<code>gameType</code>的值：<code>stellaris</code>, <code>ck2</code>, <code>ck3</code>, <code>eu4</code>, <code>hoi4</code>, <code>ir</code>, <code>vic2</code>, <code>vic3</code>（或者<code>core</code>，对于核心规则分组） <a href="#footnote-ref1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:2" class="footnote-backref">↩︎</a></p></li></ol></section>`,12);function S(q,D){const e=d("Badge");return o(),r("div",null,[v,s("h4",u,[s("a",m,[s("span",null,[n("Priorities "),i(e,{type:"tip"},{default:l(()=>[n("New in 1.3.7")]),_:1})])])]),b,s("h4",g,[s("a",f,[s("span",null,[n("Scripted Variables "),i(e,{type:"tip"},{default:l(()=>[n("New in 1.3.5")]),_:1})])])]),x,s("h4",k,[s("a",_,[s("span",null,[n("如何在规则文件中使用ANT表达式 "),i(e,{type:"tip"},{default:l(()=>[n("New in 1.3.6")]),_:1})])])]),y,s("h4",w,[s("a",T,[s("span",null,[n("如何在规则文件中使用正则表达式 "),i(e,{type:"tip"},{default:l(()=>[n("New in 1.3.6")]),_:1})])])]),O])}const W=t(h,[["render",S],["__file","config.html.vue"]]),N=JSON.parse('{"path":"/zh/config.html","title":"规则分组与规则文件","lang":"zh-CN","frontmatter":{"description":"规则分组与规则文件 规则分组 概述 PLS基于由CWT规则文件组成的规则分组，实现了诸多语言功能。 规则分组可以有不同的来源，而对于同一来源的规则分组，又区分为各自游戏类型的规则分组，以及所有游戏类型共享的核心规则分组。 参考链接： 仓库一览 来源 内置的规则分组 路径：config/{gameType}[1]（位于插件jar包中） 是否启用：始终启用...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://windea.icu/Paradox-Language-Support/en/config.html"}],["meta",{"property":"og:url","content":"https://windea.icu/Paradox-Language-Support/zh/config.html"}],["meta",{"property":"og:site_name","content":"Paradox Language Support"}],["meta",{"property":"og:title","content":"规则分组与规则文件"}],["meta",{"property":"og:description","content":"规则分组与规则文件 规则分组 概述 PLS基于由CWT规则文件组成的规则分组，实现了诸多语言功能。 规则分组可以有不同的来源，而对于同一来源的规则分组，又区分为各自游戏类型的规则分组，以及所有游戏类型共享的核心规则分组。 参考链接： 仓库一览 来源 内置的规则分组 路径：config/{gameType}[1]（位于插件jar包中） 是否启用：始终启用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-05T20:33:40.000Z"}],["meta",{"property":"article:author","content":"DragonKnightOfBreeze"}],["meta",{"property":"article:modified_time","content":"2024-12-05T20:33:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"规则分组与规则文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-05T20:33:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DragonKnightOfBreeze\\",\\"url\\":\\"https://github.com/DragonKnightOfBreeze\\",\\"email\\":\\"dk_breeze@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"规则分组","slug":"config-group","link":"#config-group","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"来源","slug":"来源","link":"#来源","children":[]},{"level":3,"title":"覆盖策略","slug":"覆盖策略","link":"#覆盖策略","children":[]}]},{"level":2,"title":"CWT规则文件","slug":"cwt-config-file","link":"#cwt-config-file","children":[{"level":3,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"编写CWT规则文件","slug":"writing-cwt-config-files","link":"#writing-cwt-config-files","children":[{"level":3,"title":"概述","slug":"概述-2","link":"#概述-2","children":[]},{"level":3,"title":"编写规范","slug":"编写规范","link":"#编写规范","children":[]},{"level":3,"title":"编写规范（扩展的CWT规则）","slug":"编写规范-扩展的cwt规则","link":"#编写规范-扩展的cwt规则","children":[]},{"level":3,"title":"FAQ","slug":"faq","link":"#faq","children":[]}]},{"level":2,"title":"导入CWT规则文件","slug":"importing-cwt-config-files","link":"#importing-cwt-config-files","children":[{"level":3,"title":"概述","slug":"概述-3","link":"#概述-3","children":[]}]}],"git":{"createdTime":1733430820000,"updatedTime":1733430820000,"contributors":[{"name":"tamino202","email":"tamino202@gmail.com","commits":1}]},"readingTime":{"minutes":7.03,"words":2109},"filePathRelative":"zh/config.md","localizedDate":"2024年12月5日","autoDesc":true}');export{W as comp,N as data};
